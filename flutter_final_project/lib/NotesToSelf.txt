GDSC Member:
- Splash Screen > Sign Up or Sign in
- Sign In > Landing Page
- Landing Page > Activity Calendar, Events, Discussions, Profile
- Activity Calendar > View all events for some date, View Event, Add Event
- Events > View all events, view specific event, copy event link, edit event details, 

Material designs/colors etc help: https://m3.material.io/develop/flutter & https://docs.flutter.dev/ui/widgets/material

Unit testing: https://codelabs.developers.google.com/codelabs/flutter-app-testing/#5

https://codelabs.developers.google.com/codelabs/google-maps-in-flutter#0

Help with custom color themes: https://blog.logrocket.com/dynamic-theme-switcher-flutter/

- Badge
- Bottom Sheet

- Navigation Bar

https://www.freecodecamp.org/news/set-up-firebase-cloud-messaging-in-flutter/


- File folders, bloc hatana hai states etc dekho, firebase connect, UI fix


- dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  firebase_core: ^2.24.2
  cloud_firestore: ^4.13.6
  firebase_auth: ^4.15.3
  flutter_bloc: ^8.1.3
  # golden_toolkit: ^0.15.0
  equatable: ^2.0.5
  intl: ^0.19.0
  google_sign_in: ^6.2.1
  characters: ^1.3.0
  # rxdart: ^0.27.7
  # google_maps_flutter: ^2.5.0

- Authentication Bloc:
Events:
Loading, Error, CreateUser, UpdateUser, DeleteUser,
Sign in with Google,
ForgotPassword,
SignOut,
Get one user,
Get list of all users that are members of a specific campus (for lead),
Get list of all admins,
















Google Sign-in code for later:
Future<AppUser?> signInWithGoogle
  (
    {
      // required String name,
      // required String email,
      // required String password,
      required String role,
      String? campus
    }
  )
  async
  {
    final GoogleSignIn googleSignIn = GoogleSignIn();
    final GoogleSignInAccount? googleSignInAccount = await googleSignIn.signIn();
    if (googleSignInAccount == null) 
    {
      print('Error in AuthenticationRepository, signInWithGoogle.... googleSignInAccount == nulll');
    }
    final GoogleSignInAuthentication googleSignInAuthentication = await googleSignInAccount!.authentication;
    final AuthCredential authCredential = GoogleAuthProvider.credential
    (
      accessToken: googleSignInAuthentication.accessToken,
      idToken: googleSignInAuthentication.idToken
    );
    try 
    {
      final UserCredential userCredential = await firebaseAuth.signInWithCredential(authCredential);
      final User? signedInUser = userCredential.user;
      final appUserFromFirebase = await FirebaseFirestore.instance.collection('Users').doc(signedInUser!.uid).get();
      if (appUserFromFirebase.exists == false)
      {
        AppUser user = AppUser
        (
          id: signedInUser.uid,
          name: signedInUser.displayName ?? '',
          email: signedInUser.email ?? '',
          role: role,
          campus: campus,
          approved: false
        );
        await FirebaseFirestore.instance.collection('Users').doc(signedInUser!.uid).set(user.toJson());
        return user;
      }
    }
    catch (e) 
    {
      throw Exception('Error signing in with Google: $e');
    }
  }